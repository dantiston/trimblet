{"version":3,"sources":["components/header.react.js","components/experience.react.js","App.js","serviceWorker.js","index.js"],"names":["Header","_Component","Object","_Users_ttrimble_Code_resume_builder_resume_builder_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_ttrimble_Code_resume_builder_resume_builder_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_ttrimble_Code_resume_builder_resume_builder_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","apply","arguments","_Users_ttrimble_Code_resume_builder_resume_builder_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_4__","_Users_ttrimble_Code_resume_builder_resume_builder_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","style","fontSize","props","info","name","email","phone","Component","Experience","entries","map","entry","margin","fontWeight","fontStyle","float","title","start_date","end_date","description","accomplishments","accomplishment","Map","require","App","resume","resume_json","react_default","className","get","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ohDAEaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAGI,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,SAAU,SAAUb,KAAKc,MAAMC,KAAKC,MACjDP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YAAOX,KAAKc,MAAMC,KAAKE,OACvBR,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,YAAOX,KAAKc,MAAMC,KAAKG,aATjCtB,EAAA,CAA4BuB,kJCAfC,EAAb,SAAAvB,GAAA,SAAAuB,IAAA,OAAAtB,OAAAC,EAAA,EAAAD,CAAAE,KAAAoB,GAAAtB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsB,GAAAjB,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAsB,EAAAvB,GAAAC,OAAAQ,EAAA,EAAAR,CAAAsB,EAAA,EAAAb,IAAA,SAAAC,MAAA,WAGI,OACEC,EAAAC,EAAAC,cAAA,WACGX,KAAKc,MAAMO,QAAQC,IAAI,SAAAC,GACtB,OACEd,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACY,OAAQ,WACnBf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAACa,WAAY,SACvBF,EAAMP,MAETP,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CACTc,UAAW,SACXC,MAAO,UAERJ,EAAMK,QAGXnB,EAAAC,EAAAC,cAAA,WAAMY,EAAMM,WAAZ,OAA4BN,EAAMO,UAClCrB,EAAAC,EAAAC,cAAA,WAAMY,EAAMQ,aACZtB,EAAAC,EAAAC,cAAA,UACGY,EAAMS,gBAAgBV,IAAI,SAAAW,GACzB,OACExB,EAAAC,EAAAC,cAAA,UAAKsB,EAAeF,wBAxBxCX,EAAA,CAAgCD,gJCIxBe,EAAQC,EAAQ,IAAhBD,IAEAtC,EAAWuC,EAAQ,IAAnBvC,OACAwB,EAAee,EAAQ,IAAvBf,WAgBOgB,mLAXX,IAAMC,EAASH,EAAII,GACnB,OACEC,EAAA7B,EAAAC,cAAA,OAAK6B,UAAU,OACbD,EAAA7B,EAAAC,cAACf,EAAD,CAAQmB,KAAMsB,EAAOI,IAAI,UACzBF,EAAA7B,EAAAC,cAACS,EAAD,CAAYC,QAASgB,EAAOI,IAAI,gBAChCF,EAAA7B,EAAAC,cAACS,EAAD,CAAYC,QAASgB,EAAOI,IAAI,uBARtBtB,aCCEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOT,EAAA7B,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a1533be3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class Header extends Component {\n\n  render() {\n    return (\n      <header>\n        <div style={{fontSize: '32pt'}}>{this.props.info.name}</div>\n        <div>\n          <span>{this.props.info.email}</span>\n          <span> • </span>\n          <span>{this.props.info.phone}</span>\n        </div>\n      </header>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\n\nexport class Experience extends Component {\n\n  render() {\n    return (\n      <div>\n        {this.props.entries.map(entry => {\n          return (\n            <div style={{margin: \"10px 0\"}}>\n              <div>\n                <span style={{fontWeight: 'bold'}}>\n                  {entry.name}\n                </span>\n                <span style={{\n                    fontStyle: 'italic',\n                    float: 'right',\n                  }}>\n                  {entry.title}\n                </span>\n              </div>\n              <div>{entry.start_date} to {entry.end_date}</div>\n              <div>{entry.description}</div>\n              <ul>\n                {entry.accomplishments.map(accomplishment => {\n                  return (\n                    <li>{accomplishment.description}</li>\n                  )\n                })}\n              </ul>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport resume_json from './data/trimblet.json';\n\nconst { Map } = require('immutable');\n\nconst { Header } = require('./components/header.react');\nconst { Experience } = require('./components/experience.react');\n\nclass App extends Component {\n\n  render() {\n    const resume = Map(resume_json);\n    return (\n      <div className=\"App\">\n        <Header info={resume.get(\"info\")} />\n        <Experience entries={resume.get(\"experience\")} />\n        <Experience entries={resume.get(\"education\")} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}